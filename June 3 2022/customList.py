import random
from typing import Generic, Iterable, Iterator
from typing import MutableSequence
#from typing import overload
from typing import TypeVar
from typing_extensions import SupportsIndex

_T = TypeVar('_T')


class RandomNumbers(MutableSequence[_T], Generic[_T]):

    #@overload        
    #def __init__(self) -> None: ...

    #@overload
    def __init__(self, __iterable) -> Iterable[_T]: ...
    #def copy(self) -> RandomNumbers[_T]: ...
    def insert(self, __value: _T, __start: SupportsIndex = ...) -> int: ...
    def append(self, __object: _T) -> None: ...
    def pop(self, __index : SupportsIndex = ...) -> _T: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[_T]: ...
    #@overload
    def __getitem__(self, __i: SupportsIndex) -> _T: ...
    #@overload
    def __setitem__(self, __i: SupportsIndex, __o: _T) -> None: ...
    def __delitem__(self, __i: SupportsIndex | slice) -> None: ...
    def __add__(self, __x: list[_T]) -> list[_T]: ...
    def __mul__(self, __n: SupportsIndex) -> list[_T]: ...
    def __gt__(self, __x: list[_T]) -> bool: ...
    def __lt__(self, __x: list[_T]) -> bool: ...    
    def __le__(self, __x: list[_T]) -> bool: ...


    def __next__(self) -> _T:
        self.num = random.randint(0,100)
